program:
   blocks*= block
;
block:
    block =  clazz | block = interface
;
clazz:
    name=ID 'class' endl indent modifiers*=class_modifier contents*=class_content deindent
;

interface:
    name=ID 'interface' endl indent contents*=interface_content deindent
;

class_modifier:
    'implements' name=[interface] endl
;

class_content:
    (content=field endl | content=method)
;

interface_content:
    content = method_signature
;

field:
    name=ID type=primtype
;

method:
    signature=method_signature indent body=method_body deindent
;

assignment:
    target=ID '=' value=expression
;


local_var:
    name=ID type=primtype
;

method_signature:
    name=ID ('qry' | 'cmd' | 'prim') '(' params*=param[','] ')' ':' returntype=primtype endl
;

param:
    name=ID type=primtype
;

method_body:
    statements+=statement
;

return_stmt:
    'return' value=expression
;

pazz:
    'pass'
;

statement:
    (
    statement=function_call |
    statement=local_var |
    statement=assignment |
    statement=pazz |
    statement=return_stmt
    ) endl
;

function_call:
    (class_name=ID ".")? method_name=ID '(' params*=expression[','] ')'
;

expression:
    (
    expression=function_call |
    expression=literal|
    expression=identifier
    )
;

identifier:
    name=ID
;
primtype:
    primtype = 'string' | primtype = 'result'
;
literal:
    value_str = STRING | value_num = NUMBER | (value_result = "OK" | value_result = "ERROR"| value_result = "PENDING")
;
endl:
    'NEWLINE'
;
indent:
    'INDENT'
;
deindent:
    'DEINDENT'
;